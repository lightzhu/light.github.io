(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{517:function(t,a,i){"use strict";i.r(a);var v=i(6),_=Object(v.a)({},(function(){var t=this,a=t.$createElement,i=t._self._c||a;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("h4",{attrs:{id:"配置"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[t._v("#")]),t._v(" 配置")]),t._v(" "),i("ul",[i("li",[i("code",[t._v("git config --global user.name 'name'")]),t._v(" 配置用户名")]),t._v(" "),i("li",[i("code",[t._v("git config --global user.email 'email@example.com'")]),t._v(" 配置邮箱地址")])]),t._v(" "),i("h4",{attrs:{id:"新建代码库"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#新建代码库"}},[t._v("#")]),t._v(" 新建代码库")]),t._v(" "),i("ul",[i("li",[i("code",[t._v("git init")]),t._v(" 将当前目录初始化为 git 仓库，创建完成后会在当前文件夹下生成一个 .git 文件夹")]),t._v(" "),i("li",[i("code",[t._v("git clone [url]")]),t._v(" 拷贝一个 Git 仓库到本地")])]),t._v(" "),i("h4",{attrs:{id:"增加-删除文件"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#增加-删除文件"}},[t._v("#")]),t._v(" 增加/删除文件")]),t._v(" "),i("ul",[i("li",[i("code",[t._v("git add [文件名.后缀] [文件名.后缀] ...")]),t._v(" 添加若干个文件到暂存区")]),t._v(" "),i("li",[i("code",[t._v("git add .")]),t._v(" 添加当前目录下所有文件到暂存区")]),t._v(" "),i("li",[i("code",[t._v("git rm [文件名.后缀]")]),t._v(" 将文件从暂存区和硬盘中删除")]),t._v(" "),i("li",[i("code",[t._v("git rm --cached [文件名.后缀]")]),t._v(" 将文件从暂存区中删除")])]),t._v(" "),i("h4",{attrs:{id:"代码提交"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#代码提交"}},[t._v("#")]),t._v(" 代码提交")]),t._v(" "),i("ul",[i("li",[i("code",[t._v("git commit -m '描述信息'")]),t._v(" 使用 git add 命令将内容存入暂存区")]),t._v(" "),i("li",[i("code",[t._v("git commot -am '描述信息'")]),t._v(" 提交暂存区和提交仓库区一起执行")]),t._v(" "),i("li",[i("code",[t._v("git commit [file1] [file2] ... -m [message]")]),t._v(" 提交暂存区的指定文件到仓库区")])]),t._v(" "),i("h4",{attrs:{id:"分支"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#分支"}},[t._v("#")]),t._v(" 分支")]),t._v(" "),i("ul",[i("li",[i("code",[t._v("git branch")]),t._v(" 列出本地所有的分支")]),t._v(" "),i("li",[i("code",[t._v("git branch -r")]),t._v(" 列出远程所有分支")]),t._v(" "),i("li",[i("code",[t._v("git branch -a")]),t._v(" 列出本地和远程的所有分支")]),t._v(" "),i("li",[i("code",[t._v("git branch [branch-name]")]),t._v(" 新建一个分支，但是依然停留在当前分支")]),t._v(" "),i("li",[i("code",[t._v("git checkout -b [branch-name]")]),t._v(" 新建一个分支，并且切换到该分支")]),t._v(" "),i("li",[i("code",[t._v("git checkout [branch-name]")]),t._v(" 切换到指定分支，并且更新工作区")]),t._v(" "),i("li",[i("code",[t._v("git checkout -")]),t._v(" 切换到上一个分支")]),t._v(" "),i("li",[i("code",[t._v("git merge [branch-name]")]),t._v(" 合并指定分支到当前分支")]),t._v(" "),i("li",[i("code",[t._v("git branch -d [branch-name]")]),t._v(" 删除分支")]),t._v(" "),i("li",[i("code",[t._v("git push origin --delete [branch-name]")]),t._v(" 删除远程分支")])]),t._v(" "),i("h4",{attrs:{id:"查看信息"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#查看信息"}},[t._v("#")]),t._v(" 查看信息")]),t._v(" "),i("ul",[i("li",[i("code",[t._v("git status")]),t._v(" 显示有变更的文件")]),t._v(" "),i("li",[i("code",[t._v("git status -s")]),t._v(" 显示文件状态，A 表示已经添加到暂存区，AM 表示添加到暂存区后又有变动。")]),t._v(" "),i("li",[i("code",[t._v("git log")]),t._v(" 显示当前分支的版本历史")]),t._v(" "),i("li",[i("code",[t._v("git log --stat")]),t._v(" 显示 commit 历史，以及每次 commit 发生变更的文件")]),t._v(" "),i("li",[i("code",[t._v("git log -p [file]")]),t._v(" 显示指定文件相关的每一次 diff")]),t._v(" "),i("li",[i("code",[t._v("git blame [file]")]),t._v(" 显示指定文件是什么人在什么时候修改过")]),t._v(" "),i("li",[i("code",[t._v("git diff")]),t._v(" 显示工作区与暂存区的差异。查看尚未暂存的改动")]),t._v(" "),i("li",[i("code",[t._v("git diff --cached [file]")]),t._v(" 显示暂存区与上一个 commit 之间的差异")]),t._v(" "),i("li",[i("code",[t._v("git diff HEAD")]),t._v(" 查看已暂存和未暂存的所有改动")]),t._v(" "),i("li",[i("code",[t._v("git diff --stat")]),t._v(" 显示摘要而非整个 diff")]),t._v(" "),i("li",[i("code",[t._v("git reset HEAD")]),t._v(" 取消已暂存的内容")])]),t._v(" "),i("h4",{attrs:{id:"远程同步"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#远程同步"}},[t._v("#")]),t._v(" 远程同步")]),t._v(" "),i("ul",[i("li",[i("code",[t._v("git fecth [remote-name]")]),t._v(" 下载远程仓库的所有变动")]),t._v(" "),i("li",[i("code",[t._v("git remote -v")]),t._v(" 显示所有的远程仓库")]),t._v(" "),i("li",[i("code",[t._v("git remote show [remote-name]")]),t._v(" 显示某个远程仓库的信息")]),t._v(" "),i("li",[i("code",[t._v("git remote add <远程主机名> <url>")]),t._v(" 添加远程主机，用于连接本地和远程仓库")]),t._v(" "),i("li",[i("code",[t._v("git remote rm <远程主机名>")]),t._v(" 删除远程主机")]),t._v(" "),i("li",[i("code",[t._v("git pull <远程主机名> <远程分支名>")]),t._v(" 拉取远程分支并且合并到当前分支")]),t._v(" "),i("li",[i("code",[t._v("git push <远程主机名> <本地分支名>")]),t._v(" 推送本地分支到远程 master 主分支")]),t._v(" "),i("li",[i("code",[t._v("git push -u origin master")]),t._v(" 将本地 master 推送到 origin 主机，同时指定 origin 为默认主机，后面就可以不加任何参数使用"),i("code",[t._v("git push")]),t._v("了。")])]),t._v(" "),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[t._v('git init\ngit add README.md\ngit commit -m "first commit"\ngit remote add origin https://github.com/Vincent-R/Emrs.git\ngit push -u origin master\n')])])]),i("div",{staticClass:"language- extra-class"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[t._v("远程分支与当前分支关联(关联后可以直接使用git pull/push)\ngit branch --set-upstream-to=<远程主机名>/<远程分支名> <当前分支名>\n若出现错误时，可尝试 git checkout <想要关联的本地分支名>\n")])])]),i("h3",{attrs:{id:"列出所有-tag"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#列出所有-tag"}},[t._v("#")]),t._v(" 列出所有 tag")]),t._v(" "),i("p",[t._v("$ git tag")]),t._v(" "),i("h3",{attrs:{id:"新建一个-tag-在当前-commit"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#新建一个-tag-在当前-commit"}},[t._v("#")]),t._v(" 新建一个 tag 在当前 commit")]),t._v(" "),i("p",[t._v("$ git tag [tag]")]),t._v(" "),i("h3",{attrs:{id:"新建一个-tag-在指定-commit"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#新建一个-tag-在指定-commit"}},[t._v("#")]),t._v(" 新建一个 tag 在指定 commit")]),t._v(" "),i("p",[t._v("$ git tag [tag][commit]")]),t._v(" "),i("h3",{attrs:{id:"查看-tag-信息"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#查看-tag-信息"}},[t._v("#")]),t._v(" 查看 tag 信息")]),t._v(" "),i("p",[t._v("$ git show [tag]")]),t._v(" "),i("h3",{attrs:{id:"提交指定-tag"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#提交指定-tag"}},[t._v("#")]),t._v(" 提交指定 tag")]),t._v(" "),i("p",[t._v("$ git push [remote][tag]")]),t._v(" "),i("h3",{attrs:{id:"提交所有-tag"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#提交所有-tag"}},[t._v("#")]),t._v(" 提交所有 tag")]),t._v(" "),i("p",[t._v("$ git push [remote] --tags")]),t._v(" "),i("h3",{attrs:{id:"新建一个分支-指向某个-tag"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#新建一个分支-指向某个-tag"}},[t._v("#")]),t._v(" 新建一个分支，指向某个 tag")]),t._v(" "),i("p",[t._v("$ git checkout -b [branch][tag]")]),t._v(" "),i("h3",{attrs:{id:"显示有变更的文件"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#显示有变更的文件"}},[t._v("#")]),t._v(" 显示有变更的文件")]),t._v(" "),i("p",[t._v("$ git status")]),t._v(" "),i("h3",{attrs:{id:"显示当前分支的版本历史"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#显示当前分支的版本历史"}},[t._v("#")]),t._v(" 显示当前分支的版本历史")]),t._v(" "),i("p",[t._v("$ git log")]),t._v(" "),i("h3",{attrs:{id:"显示-commit-历史-以及每次-commit-发生变更的文件"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#显示-commit-历史-以及每次-commit-发生变更的文件"}},[t._v("#")]),t._v(" 显示 commit 历史，以及每次 commit 发生变更的文件")]),t._v(" "),i("p",[t._v("$ git log --stat")]),t._v(" "),i("h3",{attrs:{id:"显示某个文件的版本历史-包括文件改名"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#显示某个文件的版本历史-包括文件改名"}},[t._v("#")]),t._v(" 显示某个文件的版本历史，包括文件改名")]),t._v(" "),i("p",[t._v("$ git log --follow [file]\n$ git whatchanged [file]")]),t._v(" "),i("h3",{attrs:{id:"显示指定文件相关的每一次-diff"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#显示指定文件相关的每一次-diff"}},[t._v("#")]),t._v(" 显示指定文件相关的每一次 diff")]),t._v(" "),i("p",[t._v("$ git log -p [file]")]),t._v(" "),i("h3",{attrs:{id:"显示指定文件是什么人在什么时间修改过"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#显示指定文件是什么人在什么时间修改过"}},[t._v("#")]),t._v(" 显示指定文件是什么人在什么时间修改过")]),t._v(" "),i("p",[t._v("$ git blame [file]")]),t._v(" "),i("h3",{attrs:{id:"显示暂存区和工作区的差异"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#显示暂存区和工作区的差异"}},[t._v("#")]),t._v(" 显示暂存区和工作区的差异")]),t._v(" "),i("p",[t._v("$ git diff")]),t._v(" "),i("h3",{attrs:{id:"显示暂存区和上一个-commit-的差异"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#显示暂存区和上一个-commit-的差异"}},[t._v("#")]),t._v(" 显示暂存区和上一个 commit 的差异")]),t._v(" "),i("p",[t._v("$ git diff --cached []")]),t._v(" "),i("h3",{attrs:{id:"显示工作区与当前分支最新-commit-之间的差异"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#显示工作区与当前分支最新-commit-之间的差异"}},[t._v("#")]),t._v(" 显示工作区与当前分支最新 commit 之间的差异")]),t._v(" "),i("p",[t._v("$ git diff HEAD")]),t._v(" "),i("h3",{attrs:{id:"显示两次提交之间的差异"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#显示两次提交之间的差异"}},[t._v("#")]),t._v(" 显示两次提交之间的差异")]),t._v(" "),i("p",[t._v("$ git diff [first-branch]...[second-branch]")]),t._v(" "),i("h3",{attrs:{id:"显示某次提交的元数据和内容变化"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#显示某次提交的元数据和内容变化"}},[t._v("#")]),t._v(" 显示某次提交的元数据和内容变化")]),t._v(" "),i("p",[t._v("$ git show [commit]")]),t._v(" "),i("h3",{attrs:{id:"显示某次提交发生变化的文件"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#显示某次提交发生变化的文件"}},[t._v("#")]),t._v(" 显示某次提交发生变化的文件")]),t._v(" "),i("p",[t._v("$ git show --name-only [commit]")]),t._v(" "),i("h3",{attrs:{id:"显示某次提交时-某个文件的内容"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#显示某次提交时-某个文件的内容"}},[t._v("#")]),t._v(" 显示某次提交时，某个文件的内容")]),t._v(" "),i("p",[t._v("$ git show [commit]:[filename]")]),t._v(" "),i("h3",{attrs:{id:"显示当前分支的最近几次提交"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#显示当前分支的最近几次提交"}},[t._v("#")]),t._v(" 显示当前分支的最近几次提交")]),t._v(" "),i("p",[t._v("$ git reflog")]),t._v(" "),i("h3",{attrs:{id:"下载远程仓库的所有变动"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#下载远程仓库的所有变动"}},[t._v("#")]),t._v(" 下载远程仓库的所有变动")]),t._v(" "),i("p",[t._v("$ git fetch [remote]")]),t._v(" "),i("h3",{attrs:{id:"显示所有远程仓库"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#显示所有远程仓库"}},[t._v("#")]),t._v(" 显示所有远程仓库")]),t._v(" "),i("p",[t._v("$ git remote -v")]),t._v(" "),i("h3",{attrs:{id:"显示某个远程仓库的信息"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#显示某个远程仓库的信息"}},[t._v("#")]),t._v(" 显示某个远程仓库的信息")]),t._v(" "),i("p",[t._v("$ git remote show [remote]")]),t._v(" "),i("h3",{attrs:{id:"增加一个新的远程仓库-并命名"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#增加一个新的远程仓库-并命名"}},[t._v("#")]),t._v(" 增加一个新的远程仓库，并命名")]),t._v(" "),i("p",[t._v("$ git remote add [shortname][url]")]),t._v(" "),i("h3",{attrs:{id:"取回远程仓库的变化-并与本地分支合并"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#取回远程仓库的变化-并与本地分支合并"}},[t._v("#")]),t._v(" 取回远程仓库的变化，并与本地分支合并")]),t._v(" "),i("p",[t._v("$ git pull [remote][branch]")]),t._v(" "),i("h3",{attrs:{id:"上传本地指定分支到远程仓库"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#上传本地指定分支到远程仓库"}},[t._v("#")]),t._v(" 上传本地指定分支到远程仓库")]),t._v(" "),i("p",[t._v("$ git push [remote][branch]")]),t._v(" "),i("h3",{attrs:{id:"强行推送当前分支到远程仓库-即使有冲突"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#强行推送当前分支到远程仓库-即使有冲突"}},[t._v("#")]),t._v(" 强行推送当前分支到远程仓库，即使有冲突")]),t._v(" "),i("p",[t._v("$ git push [remote] --force")]),t._v(" "),i("h3",{attrs:{id:"推送所有分支到远程仓库"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#推送所有分支到远程仓库"}},[t._v("#")]),t._v(" 推送所有分支到远程仓库")]),t._v(" "),i("p",[t._v("$ git push [remote] --all")]),t._v(" "),i("h3",{attrs:{id:"恢复暂存区的指定文件到工作区"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#恢复暂存区的指定文件到工作区"}},[t._v("#")]),t._v(" 恢复暂存区的指定文件到工作区")]),t._v(" "),i("p",[t._v("$ git checkout [file]")]),t._v(" "),i("h3",{attrs:{id:"恢复某个-commit-的指定文件到工作区"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#恢复某个-commit-的指定文件到工作区"}},[t._v("#")]),t._v(" 恢复某个 commit 的指定文件到工作区")]),t._v(" "),i("p",[t._v("$ git checkout [commit][file]")]),t._v(" "),i("h3",{attrs:{id:"恢复上一个-commit-的所有文件到工作区"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#恢复上一个-commit-的所有文件到工作区"}},[t._v("#")]),t._v(" 恢复上一个 commit 的所有文件到工作区")]),t._v(" "),i("p",[t._v("$ git checkout .")]),t._v(" "),i("h3",{attrs:{id:"重置暂存区的指定文件-与上一次-commit-保持一致-但工作区不变"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#重置暂存区的指定文件-与上一次-commit-保持一致-但工作区不变"}},[t._v("#")]),t._v(" 重置暂存区的指定文件，与上一次 commit 保持一致，但工作区不变")]),t._v(" "),i("p",[t._v("$ git reset [file]")]),t._v(" "),i("h3",{attrs:{id:"重置暂存区与工作区-与上一次-commit-保持一致"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#重置暂存区与工作区-与上一次-commit-保持一致"}},[t._v("#")]),t._v(" 重置暂存区与工作区，与上一次 commit 保持一致")]),t._v(" "),i("p",[t._v("$ git reset --hard")]),t._v(" "),i("h3",{attrs:{id:"重置当前分支的指针为指定-commit-同时重置暂存区-但工作区不变"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#重置当前分支的指针为指定-commit-同时重置暂存区-但工作区不变"}},[t._v("#")]),t._v(" 重置当前分支的指针为指定 commit，同时重置暂存区，但工作区不变")]),t._v(" "),i("p",[t._v("$ git reset [commit]")]),t._v(" "),i("h3",{attrs:{id:"重置当前分支的-head-为指定-commit-同时重置暂存区和工作区-与指定-commit-一致"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#重置当前分支的-head-为指定-commit-同时重置暂存区和工作区-与指定-commit-一致"}},[t._v("#")]),t._v(" 重置当前分支的 HEAD 为指定 commit，同时重置暂存区和工作区，与指定 commit 一致")]),t._v(" "),i("p",[t._v("$ git reset --hard [commit]")]),t._v(" "),i("h3",{attrs:{id:"重置当前-head-为指定-commit-但保持暂存区和工作区不变"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#重置当前-head-为指定-commit-但保持暂存区和工作区不变"}},[t._v("#")]),t._v(" 重置当前 HEAD 为指定 commit，但保持暂存区和工作区不变")]),t._v(" "),i("p",[t._v("$ git reset --keep [commit]")]),t._v(" "),i("h3",{attrs:{id:"新建一个-commit-用来撤销指定-commit"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#新建一个-commit-用来撤销指定-commit"}},[t._v("#")]),t._v(" 新建一个 commit，用来撤销指定 commit")]),t._v(" "),i("h3",{attrs:{id:"后者的所有变化都将被前者抵消-并且应用到当前分支"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#后者的所有变化都将被前者抵消-并且应用到当前分支"}},[t._v("#")]),t._v(" 后者的所有变化都将被前者抵消，并且应用到当前分支")]),t._v(" "),i("p",[t._v("$ git revert [commit]")]),t._v(" "),i("h3",{attrs:{id:"生成一个可供发布的压缩包"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#生成一个可供发布的压缩包"}},[t._v("#")]),t._v(" 生成一个可供发布的压缩包")]),t._v(" "),i("p",[t._v("$ git archive")]),t._v(" "),i("h3",{attrs:{id:"备份当前工作区的内容"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#备份当前工作区的内容"}},[t._v("#")]),t._v(" 备份当前工作区的内容")]),t._v(" "),i("p",[t._v("$ git stash")]),t._v(" "),i("h3",{attrs:{id:"从-git-栈中读取最近一次保存的内容-恢复工作区的相关内容"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#从-git-栈中读取最近一次保存的内容-恢复工作区的相关内容"}},[t._v("#")]),t._v(" 从 Git 栈中读取最近一次保存的内容，恢复工作区的相关内容")]),t._v(" "),i("p",[t._v("$ git stash pop")]),t._v(" "),i("h3",{attrs:{id:"显示-git-栈内的所有备份"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#显示-git-栈内的所有备份"}},[t._v("#")]),t._v(" 显示 Git 栈内的所有备份")]),t._v(" "),i("p",[t._v("$ git stash list")]),t._v(" "),i("h3",{attrs:{id:"清空-git-栈"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#清空-git-栈"}},[t._v("#")]),t._v(" 清空 Git 栈")]),t._v(" "),i("p",[t._v("$ git stash clear")])])}),[],!1,null,null,null);a.default=_.exports}}]);